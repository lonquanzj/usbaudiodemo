/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.ccm.usbaudiodemo.usbcontrol;

public class USBControl {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public USBControl(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(USBControl obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        USBTestNativeJNI.delete_USBControl(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public USBControl() {
    this(USBTestNativeJNI.new_USBControl(), true);
  }

  public boolean initUSB() {
    return USBTestNativeJNI.USBControl_initUSB(swigCPtr, this);
  }

  public void cleanUp() {
    USBTestNativeJNI.USBControl_cleanUp(swigCPtr, this);
  }

  public void restartUSBAudioManager() {
    USBTestNativeJNI.USBControl_restartUSBAudioManager(swigCPtr, this);
  }

  public boolean initUSBDevice(int i_deviceFd, int i_productId, int i_vendorId) {
    return USBTestNativeJNI.USBControl_initUSBDevice(swigCPtr, this, i_deviceFd, i_productId, i_vendorId);
  }

  public String getOpenDeviceErrorMessage() {
    return new String(USBTestNativeJNI.USBControl_getOpenDeviceErrorMessage(swigCPtr, this));
}

  public boolean isAudioDevicePresentForLinux() {
    return USBTestNativeJNI.USBControl_isAudioDevicePresentForLinux(swigCPtr, this);
  }

  public boolean startUSBTransfers(boolean i_playAudio, String playWavName, boolean i_recordAudio, String recWavName, int i_sampleRate, boolean i_force1PPT, int i_bufferSizeInFrames, int i_openSLESBufferSizeInFrames) {
    return USBTestNativeJNI.USBControl_startUSBTransfers(swigCPtr, this, i_playAudio, playWavName, i_recordAudio,recWavName, i_sampleRate, i_force1PPT, i_bufferSizeInFrames, i_openSLESBufferSizeInFrames);
  }

  public void stopUSBTransfers() {
    USBTestNativeJNI.USBControl_stopUSBTransfers(swigCPtr, this);
  }

  public void setUSBSampleRate(int i_sampleRate) {
    USBTestNativeJNI.USBControl_setUSBSampleRate(swigCPtr, this, i_sampleRate);
  }

  public boolean startOpenSLES(boolean i_play, boolean i_record, int i_actualChannelsRecording, int i_sampleRate, int i_bufferSizeInFrames) {
    return USBTestNativeJNI.USBControl_startOpenSLES(swigCPtr, this, i_play, i_record, i_actualChannelsRecording, i_sampleRate, i_bufferSizeInFrames);
  }

  public void stopOpenSLES() {
    USBTestNativeJNI.USBControl_stopOpenSLES(swigCPtr, this);
  }

}
